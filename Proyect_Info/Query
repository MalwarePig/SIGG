CREATE TABLE `materiales` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `Folio` varchar(15) DEFAULT NULL,
  `Producto` varchar(200) DEFAULT NULL,
  `Cantidad` int(11) DEFAULT (0),
  `Estado` varchar(50) DEFAULT NULL,
  `OT` varchar(50) DEFAULT NULL,
  `Empleado` varchar(50) DEFAULT NULL,
  `Turno` varchar(3) DEFAULT NULL,
  `Maquina` varchar(30) DEFAULT NULL,
  `Comentarios` varchar(250) DEFAULT NULL,
  `Movimiento` varchar(20) DEFAULT NULL,
  `Usuario` varchar(20) DEFAULT NULL,
  `Almacen` varchar(50) DEFAULT NULL,
  `Salida` datetime DEFAULT (now()),
  PRIMARY KEY (`id`)
)

CREATE TABLE `materiales` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `Folio` varchar(15) DEFAULT NULL,

  PRIMARY KEY (`id`)
)


CREATE TABLE `requisiciones` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `Clave` varchar(15) DEFAULT NULL,
  `Producto` varchar(200) DEFAULT NULL,
  `CantidadReq` int(11) DEFAULT (0),
   `OT` varchar(10) DEFAULT NULL,
  `Comentarios` varchar(250) DEFAULT NULL,
  `EmpleadoReq` varchar(50) DEFAULT NULL,
  `Planta` varchar(50) DEFAULT NULL,
  `Estatus` varchar(20) DEFAULT NULL,
    `FechaReq` datetime DEFAULT (CURDATE()),
  PRIMARY KEY (`id`)
)


select * from requisiciones


CREATE TABLE `itemretorno` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `Folio` varchar(15) DEFAULT NULL,
  `Producto` varchar(200) DEFAULT NULL,
  `Cantidad` int(11) DEFAULT (0),
  `Estado` varchar(50) DEFAULT NULL,
  `OT` varchar(50) DEFAULT NULL,
  `Empleado` varchar(50) DEFAULT NULL,
  `Turno` varchar(3) DEFAULT NULL,
  `Maquina` varchar(30) DEFAULT NULL,
  `Comentarios` varchar(250) DEFAULT NULL,
  `Movimiento` varchar(20) DEFAULT NULL,
  `Usuario` varchar(20) DEFAULT NULL,
  `Almacen` varchar(50) DEFAULT NULL,
  `Salida` datetime DEFAULT (now()),
  PRIMARY KEY (`id`)
)



select * from folioalmacenRetorno
select * from itemretorno

select * from almacen
select * from maquinas

INSERT INTO maquinas(Nombre,Familia,)

select * from itemprestado
select * from itemprestado WHERE Maquina = 'DOOSAN NEW (24)' AND Devuelto < Entregado 


call RestarAlmacen(5,'Producto_Prueba','Nuevo')

CREATE TABLE `folioalmacenRetorno` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `Folio` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;


select * from  folioalmacenRetorno



 + " - " + 



DELIMITER //
CREATE  PROCEDURE `RetornarAlmacen`(IN Cantidad int, IN ProductoARetornar varchar(200),IN Condicion varchar(20),IN Maquinas varchar(50))
BEGIN
SET SQL_SAFE_UPDATES = 0;
SET @ActualNuevo := (SELECT Stock From almacen WHERE Producto = ProductoARetornar);
SET @TotalNuevo := (@ActualNuevo + Cantidad);
SET @ActualUsado := (SELECT StockUsado From almacen WHERE Producto = ProductoARetornar);
SET @TotalUsado := (@ActualUsado + Cantidad);
SET @ActualDevuelto := (SELECT Devuelto From itemprestado WHERE Producto = ProductoARetornar AND Maquina = Maquinas);
SET @TotalDevuelto := (@ActualDevuelto + Cantidad);

	IF (Condicion = 'Nuevo') 
    THEN UPDATE almacen SET Stock = @TotalNuevo WHERE Producto = ProductoARetornar;
    ELSE UPDATE almacen SET StockUsado = @TotalUsado WHERE Producto = ProductoARetornar;
	END IF;
    UPDATE itemprestado SET Devuelto = @TotalDevuelto WHERE Maquina = Maquinas;
END


select * from itemretorno
select * from itemprestado
call RetornarAlmacen(2,'Producto_Prueba','Nuevo','DOOSAN NEW (24)')

select * from almacen
select * from itemprestado
select * from itemretorno

DELIMITER //
CREATE PROCEDURE `RestarAlmacen`(IN Cantidad int, IN ProductoARestar varchar(200),IN Condicion varchar(20))
BEGIN
SET SQL_SAFE_UPDATES = 0;
SET @ActualNuevo := (SELECT Stock From almacen WHERE Producto = ProductoARestar);
SET @TotalNuevo := (@ActualNuevo - Cantidad);
SET @ActualUsado := (SELECT StockUsado From almacen WHERE Producto = ProductoARestar);
SET @TotalUsado := (@ActualUsado - Cantidad);

	IF (Condicion = 'Nuevo') THEN UPDATE almacen SET Stock = @TotalNuevo WHERE Producto = ProductoARestar;
    ELSE UPDATE almacen SET StockUsado = @TotalUsado WHERE Producto = ProductoARestar;
      END IF;
END
DELIMITER ;


 
SET SQL_SAFE_UPDATES = 0;
/**********************************************************************************************************************************************************************************/
DELIMITER //
CREATE PROCEDURE IncrementarFolioRetornoAlmacen(in Nuevo varchar(20)
)
BEGIN
 INSERT INTO folioalmacenRetorno(Folio)values(Nuevo);
END;




-----------------

select * from itemretorno
select * from  itemprestado


-------------------------
 
 
DROP PROCEDURE IF EXISTS SPPruebas;

DELIMITER //
CREATE  PROCEDURE SPPruebas(IN inPlanta varchar(200))
BEGIN
SET SQL_SAFE_UPDATES = 0;
drop table ListaUbicaciones;
drop table ResumenAuditoria;
CREATE TEMPORARY TABLE ListaUbicaciones as select distinct Ubicacion from gavetas where Planta = 'Morelos' order by Ubicacion desc;/*clonar lista de ubicaciones a temporal*/
CREATE TEMPORARY TABLE ResumenAuditoria(
      id int,
      Ubicacion varchar(255) DEFAULT NULL,
      fecha datetime DEFAULT NULL,
      primary key(id)
    );

SET @cantidad = 0;
SET @cantidad = (select count(*) from ListaUbicaciones);
    while @cantidad > 0 do
     SET @cantidad = (select count(*) from ListaUbicaciones);
        SET @Ubicacion = (select Ubicacion from ListaUbicaciones order by Ubicacion limit 1); /*Ubicacion actual*/
        /*Obtener fecha de ultima */
        
        delete from ListaUbicaciones where Ubicacion = @Ubicacion;
       select @Ubicacion, count(*) from ListaUbicaciones;
     end while;
END;

call SPPruebas('Morelos');
 
 select * from gavetas  
 update gavetas set ubicacion = '-' where ubicacion = ''
 
/************************************************************************************************************************************************************************************/ 
 
DROP PROCEDURE IF EXISTS SPPruebas;

DELIMITER //
CREATE  PROCEDURE SPPruebas(IN inPlanta varchar(200))
BEGIN
SET SQL_SAFE_UPDATES = 0;
drop table ListaUbicaciones;
drop table ResumenAuditoria;
CREATE TEMPORARY TABLE ListaUbicaciones as select distinct Ubicacion from gavetas where Planta = 'Morelos' order by Ubicacion desc;/*clonar lista de ubicaciones a temporal*/
CREATE TEMPORARY TABLE ResumenAuditoria(
      id int,
      Ubicacion varchar(255) DEFAULT NULL,
      fecha datetime DEFAULT NULL,
      primary key(id)
    );

SET @cantidad = 0;
SET @Fecha='';
SET @cantidad = (select count(*) from ListaUbicaciones);
    while @cantidad > 0 do
     SET @cantidad = (select count(*) from ListaUbicaciones);
        SET @Ubicacion = (select Ubicacion from ListaUbicaciones order by Ubicacion limit 1); /*Ubicacion actual*/
        /*Obtener fecha de ultima */
        SELECT * FROM auditoriagavetas WHERE Ubicacion = @Ubicacion AND FechaAjuste = (SELECT MAX(FechaAjuste) from auditoriagavetas);

        delete from ListaUbicaciones where Ubicacion = @Ubicacion;
       /*select @Ubicacion, count(*) from ListaUbicaciones;*/
     end while;
END;

call SPPruebas('Morelos');
 
 select * from gavetas  
 update gavetas set ubicacion = '-' where ubicacion = ''
 
 
 
 
 SET @Fecha = CURDATE();
 @Fecha := (SELECT * FROM auditoriagavetas WHERE Ubicacion = 'CAJA a' AND FechaAjuste = (SELECT MAX(FechaAjuste) from auditoriagavetas));



/************************************************************************************************************************************************************************************/
DELIMITER //
CREATE PROCEDURE `DespachoAlmacen`(IN inFolio varchar(200),IN inProducto varchar(200),IN inCantidad int,IN inEstado varchar(20),IN inOT varchar(20),IN inEstatus varchar(20),IN inMaquina varchar(50),
IN inEmpleado varchar(70),IN inParcial varchar(40),IN inComentario varchar(200),IN inTurno varchar(30),IN inMovimiento varchar(40),IN inPlanta varchar(20),IN inUsuario varchar(40),IN inAlmacen varchar(40))
BEGIN
 
 INSERT INTO itemprestado(Folio, Producto, Entregado, Estado, OT,OTEstatus, Maquina, Empleado, Turno, Comentarios, Movimiento, Almacen, Usuario,Parcial,Utilizado)values
(inFolio,inProducto,inCantidad,inEstado,inOT,inEstatus,inMaquina,inEmpleado,inTurno,inComentario,inMovimiento,inPlanta,inUsuario,inParcial,inCantidad);

 
SET @ActualNuevo := (SELECT Stock From almacen WHERE Producto = inProducto AND Almacen = inAlmacen); 
SET @TotalNuevo := (@ActualNuevo - inCantidad); 

SET @ActualUsado := (SELECT StockUsado From almacen WHERE Producto = inProducto AND Almacen = inAlmacen);
SET @TotalUsado := (@ActualUsado - inCantidad);

SET @ActualAfilado := (SELECT StockAfilado From almacen WHERE Producto = inProducto AND Almacen = inAlmacen);
SET @TotalAfilado := (@ActualAfilado - inCantidad);


SELECT @TotalNuevo, @TotalUsado;
	IF (inEstado = 'Nuevo') THEN UPDATE almacen SET Stock = @TotalNuevo WHERE Producto = inProducto AND Almacen = inAlmacen;
    END IF;
    IF (inEstado = 'Usado') THEN UPDATE almacen SET StockUsado = @TotalUsado WHERE Producto = inProducto AND  Almacen = inAlmacen;
    END IF;
    IF (inEstado = 'Afilado') THEN UPDATE almacen SET StockAfilado = @TotalAfilado WHERE Producto = inProducto AND  Almacen = inAlmacen;
	END IF;

 
INSERT INTO folioalmacen(Folio)values(inFolio);
 
END

 DROP PROCEDURE IF EXISTS DespachoAlmacen
 *********************************************************************************************************************
  DELIMITER //
CREATE PROCEDURE ResumenAuditoria(IN inPlanta varchar(200))
BEGIN
SET SQL_SAFE_UPDATES = 0;
 	
DROP TABLE IF EXISTS ListaUbicaciones; 
DROP TABLE IF EXISTS ResumenAuditoria;

CREATE TEMPORARY TABLE ListaUbicaciones as select distinct Ubicacion from gavetas where Planta = inPlanta order by Ubicacion desc;/*clonar lista de ubicaciones a temporal*/
CREATE TEMPORARY TABLE ResumenAuditoria(
      id int(11) NOT NULL AUTO_INCREMENT,
      Ubicacion varchar(255) DEFAULT NULL,
      fecha datetime DEFAULT NULL,
      primary key(id)
    );
 
SET @cantidad = 0;
SET @Fecha='';
SET @cantidad = (select count(*) from ListaUbicaciones);
    while @cantidad > 0 do
     SET @cantidad = (select count(*) from ListaUbicaciones);
        SET @Ubicacion = (select Ubicacion from ListaUbicaciones order by Ubicacion limit 1); /*Ubicacion actual*/
        /*Obtener fecha de ultima */
        SET @Fecha = (SELECT FechaAjuste FROM auditoriagavetas WHERE Ubicacion = @Ubicacion AND FechaAjuste = (SELECT MAX(FechaAjuste) from auditoriagavetas)  LIMIT 1);
        insert into ResumenAuditoria(Ubicacion,fecha)VALUES(@Ubicacion,@Fecha);
        delete from ListaUbicaciones where Ubicacion = @Ubicacion;
       /*select @Ubicacion, count(*) from ListaUbicaciones;*/
     end while;
     
     select * from ResumenAuditoria;
END


 DROP PROCEDURE IF EXISTS ResumenAuditoria;

call ResumenAuditoria('Morelos');


SELECT FechaAjuste FROM auditoriagavetas WHERE Ubicacion = 'A' AND FechaAjuste = (SELECT MAX(FechaAjuste) from auditoriagavetas)  LIMIT 1;